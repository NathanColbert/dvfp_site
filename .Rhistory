Verdi <- rbind(r5_dun, r5_dun2)
rach_5 <- readMidi("Midi/lacrymos.mid")
rach_5 <- readMidi("Midi/lacrymos.mid")
rach_5 <- readMidi("Midi/verdi_a_.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 2  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 10
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Verdi",
piece = "Aida, 1.Prelude",
Tonality = "Major",
Type = "Opera")
View(r5_dun2)
Verdi <- rbind(Verdi, r5_dun2)
rach_5 <- readMidi("Midi/vfdesou.mid")
rach_5 <- readMidi("Midi/vfdesou.mid")
## Mid
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
notes
# take key num and add appropriate amount to transpose to C, here key is 7  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 5
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
View(r5_test2)
notes
rach_5 <- readMidi("Midi/vfdesou.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 9  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 3
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
View(r5_test2)
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer ="Verdi",
piece = "La forza del destino (opera), 1.Sinfonia",
Tonality = "Minor",
Type = "Opera")
Verdi <- rbind(Verdi, r5_dun2)
rach_5 <- readMidi("Midi/ingemi1.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
notes
# take key num and add appropriate amount to transpose to C, here key is 7  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 5
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Verdi",
piece = "Requiem, Dies Irae",
Tonality = "Minor",
Type = "Symphony")
View(r5_dun2)
Verdi <- rbind(Verdi, r5_dun2)
View(Verdi)
write.csv(Verdi, "verdi.csv")
rach_5 <- readMidi("Midi/dvopkon1.mid")
rach_5 <- readMidi("Midi/karneval.mid")
rach_5
rach_5 <- readMidi("Midi/dvolargo.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 1  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 11
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
View(r5_test2)
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "Symphony 9, Mvt. 2 Largo",
Tonality = "Major",
Type = "Symphony")
rach_5 <- readMidi("Midi/ad611.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
rach_5 <- readMidi("Midi/polrus.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 0
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
View(r5_test2)
Dvorak <- c(r5_dun2, r5_dun3)
Dvorak
#change here for new pieces
r5_dun3 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "Rusalka, 5.Ballet: Slavnostní hudba (Polonaise)",
Tonality = "Minor",
Type = "Ballet")
Dvorak <- rbind(r5_dun2, r5_dun3)
Dvorak
knitr::opts_chunk$set(echo = TRUE)
source("R Scripts/DVFP Setup.r")
rach_5 <- readMidi("Midi/dvorak4_.mid")
rach_5 <- readMidi("Midi/dv96_1.mid")
rach_5 <- readMidi("Midi/dv96_1.mid")
rach_5
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
notes
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 7
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
r5_test2
Dvorak
rach_5 <- readMidi("Midi/dvolargo.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 1  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 11
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
View(r5_test2)
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "Symphony 9, Mvt. 2 Largo",
Tonality = "Major",
Type = "Symphony")
rach_5 <- readMidi("Midi/polrus.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 0
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun3 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "Rusalka, 5.Ballet: Slavnostní hudba (Polonaise)",
Tonality = "Minor",
Type = "Ballet")
Dvorak <- rbind(r5_dun2, r5_dun3)
rach_5 <- readMidi("Midi/dv96_1.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 7
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "String Quartet 12, mvt. 1",
Tonality = "Major",
Type = "String Quartet")
Dvorak <- rbind(Dvorak, r5_dun2)
rach_5 <- readMidi("Midi/dvop22-1.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
notes
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 8
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
r5_test2
rach_5
rach_5 <- readMidi("Midi/dvop22-1.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 5  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 8
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Dvorak",
piece = "Serenade for Strings in E, 1.Moderato",
Tonality = "Major",
Type = "Symphony")
View(r5_dun2)
r5
rach_5 <- readMidi("Midi/dvsy53.mid")
Dvorak <- rbind(Dvorak, r5_dun2)
View(Dvorak)
write.csv(Dvorak, "dvorak.csv")
rach_5 <- readMidi("Midi/mahler55.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 2  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 10
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Mahler",
piece = "Symphony No.5 in C#-, 5.Rondo-Finale: Allegro",
Tonality = "Major",
Type = "Symphony")
rach_5 <- readMidi("Midi/mahsy1-1.mid")
rach_5 <- readMidi("Midi/mah_9_1.mid")
rach_5 <- readMidi("Midi/ma_9_1.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 2  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 10
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Mahler",
piece = "Symphony No.1 in D ('Titan'), 1.Langsam. Schleppend",
Tonality = "Major",
Type = "Symphony")
Mahler <- rbind(r5_dun, r5_dun2)
rach_5 <- readMidi("Midi/mahlprld.mid")
rach_5 <- readMidi("Midi/mahl0305.mid")
rach_5 <- readMidi("Midi/mahler61.mid")
## Midi Transformations/Octave Normalizing
source('R Scripts/MidiTransform.r')
# take key num and add appropriate amount to transpose to C, here key is 9  and c is 12
for (i in 1:NROW(r5$note)) {
r5$tran_note[i] = r5$note[i] + 3
if (r5$tran_note[i] > 12){
r5$tran_note[i] = r5$tran_note[i] - 12
} else {
r5$tran_note[i] = r5$tran_note[i]
}
}
## Chord and Roman Numeral Loops
source('R Scripts/C_Loop.r')
#change here for new pieces
r5_dun2 <- r5_test2 %>% mutate(one_lag_tran = lag(tran_chord_named, n = 1),
two_lag_tran = lag(tran_chord_named, n = 2),
three_lag_tran = lag(tran_chord_named, n = 3),
four_lag_tran = lag(tran_chord_named, n = 4),
composer = "Mahler",
piece = "Symphony No.6, Mvt. 1",
Tonality = "Minor",
Type = "Symphony")
Mahler <- rbind(Mahler, r5_dun2)
View(Mahler)
write.csv(Mahler, "mahler.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggrepel)
library(plotly)
library(ggthemes)
t <- read.csv("tchaikovsky2.csv")
r <- read.csv("rachmaninoff2.csv")
c <- read.csv("chopin.csv")
br <- read.csv("brahms.csv")
be <- read.csv("berlioz.csv")
beet <- read.csv("beethoven.csv")
v <- read.csv("verdi.csv")
d <- read.csv("dvorak.csv")
m <- read.csv("mahler.csv")
Composers <- rbind(r, t, c, br, be, beet, v, d, m)
comp_short <- Composers %>% filter(time <= 15000)
cols <- c("Rachmaninoff" = "Dark Red",
"Tchaikovsky" = "Gold",
"Brahms" = "Dark Green",
"Berlioz" = "Violet",
"Chopin" = "Light Blue",
"Beethoven" = "Brown",
"Dvorak" = "Gray",
"Verdi" = "Orange",
"Mahler"= "Light Green")
Piece <- comp_short$piece
Roman_Numeral <- comp_short$norm_roman_num
g<- ggplot(comp_short, aes(x = time, y = Roman_Numeral, group = Piece)) +
geom_point(size = .2) + geom_line(aes(color = Piece), alpha = .25)  + theme_tufte() +
facet_wrap(~composer, nrow = 6) +theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.position = "none") +
ylab(NULL) + xlab(NULL) +
ggtitle("Harmonic Movement Among Romantic Era Composers")
ggplotly(g, tooltip = c("y", "colour")) # lineplot attempt faceted by composer eventually by country
library(ggrepel)
library(plotly)
library(ggthemes)
t <- read.csv("tchaikovsky2.csv")
r <- read.csv("rachmaninoff2.csv")
c <- read.csv("chopin.csv")
br <- read.csv("brahms.csv")
be <- read.csv("berlioz.csv")
beet <- read.csv("beethoven.csv")
v <- read.csv("verdi.csv")
d <- read.csv("dvorak.csv")
m <- read.csv("mahler.csv")
Composers <- rbind(r, t, c, br, be, beet, v, d, m)
comp_short <- Composers %>% filter(time <= 15000)
cols <- c("Rachmaninoff" = "Dark Red",
"Tchaikovsky" = "Gold",
"Brahms" = "Dark Green",
"Berlioz" = "Violet",
"Chopin" = "Light Blue",
"Beethoven" = "Brown",
"Dvorak" = "Gray",
"Verdi" = "Orange",
"Mahler"= "Light Green")
Piece <- comp_short$piece
Roman_Numeral <- comp_short$norm_roman_num
g<- ggplot(comp_short, aes(x = time, y = Roman_Numeral, group = Piece)) +
geom_point(size = .2) + geom_line(aes(color = Piece), alpha = .25)  + theme_tufte() +
facet_wrap(~composer, nrow = 9) +theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
legend.title = element_blank(),
legend.position = "none") +
ylab(NULL) + xlab(NULL) +
ggtitle("Harmonic Movement Among Romantic Era Composers")
ggplotly(g, tooltip = c("y", "colour")) # lineplot attempt faceted by composer eventually by country
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(ggthemes)
t <- read.csv("tchaikovsky2.csv")
r <- read.csv("rachmaninoff2.csv")
c <- read.csv("chopin.csv")
br <- read.csv("brahms.csv")
be <- read.csv("berlioz.csv")
beet <- read.csv("beethoven.csv")
v <- read.csv("verdi.csv")
d <- read.csv("dvorak.csv")
m <- read.csv("mahler.csv")
Composers <- rbind(r, t, c, br, be, beet, v, d, m)
tone_cols <- c("Major" = "Blue", "Minor" = "Dark Red", "Unknown" = "Black")
r_V <- Composers %>% filter(one_lag_tran == "Gdom7", tran_chord_named != "Gdom7",
tran_chord_named != "Gmaj")
g2 <- ggplot(r_V, aes(x = norm_roman_num)) + geom_bar(aes(fill = Tonality)) +
theme_tufte() + ggtitle("Cadential Frequency: Chords Following V")  +
xlab("Roman Numerals") + ylab("Count") + theme(legend.position = "none") +
facet_wrap(~Tonality) + coord_flip() + scale_fill_manual(values = tone_cols) # example barchart
g2
#done for now!
setwd("/Users/nathancolbert/Documents/GitHub/dvfp_site")
rmarkdown::render_site()
setwd("/Users/nathancolbert/Documents/GitHub/dvfp_site")
rmarkdown::render_site()
knitr::opts_chunk$set(echo = TRUE)
Composers %>% distinct(Piece)
Composers %>% distinct(piece)
knitr::opts_chunk$set(echo = TRUE)
library(tuneR)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(data.table)
library(networkD3)
library(igraph)
str(Composers)
net<- Composers %>% select(norm_roman_num)
net <- mutate(net,
rn_lag = lag(norm_roman_num),
rn_lag2 = lag(norm_roman_num, n = 2),
rn_lag3 = lag(norm_roman_num, n = 3))
net <- net[-1:-3,]
net <- net %>% select(rn_lag3, rn_lag2, rn_lag, norm_roman_num)
net <- net %>% filter(rn_lag != rn_lag2, rn_lag2 != rn_lag3, norm_roman_num != rn_lag)
gnet <- net %>% select(rn_lag, norm_roman_num)
graph <- graph_from_data_frame(gnet, directed = T)
graph <- simplify(graph, remove.multiple = T)
wc <- cluster_walktrap(graph)
members <- membership(wc)
g2 <- igraph_to_networkD3(graph, group=members)
g2$nodes$size <- centralization.degree(graph)$res
ip1 <- forceNetwork(Links = g2$links, Nodes = g2$nodes,
Source = 'source', Target = 'target',
NodeID = 'name', Group = 'group',
Nodesize = 'size',
charge = -100,linkDistance = 200,
zoom = T, opacity = 1,
fontSize=24, arrows = F)
ip1
